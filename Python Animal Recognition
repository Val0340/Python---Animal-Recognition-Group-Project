import cv2
from tflite_runtime.interpreter import Interpreter
import numpy as np
import pygame
import board
import neopixel
path = "audio3.mp3"
pygame.mixer.init()
speaker_volume = 1
pygame.mixer.music.set_volume(speaker_volume)
pygame.mixer.music.load(path)
interpreter = Interpreter(model_path="convnet.tflite")
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()
input_shape = input_details[0]['shape']
class_labels = ['cat', 'dog', 'raccoon']
cap = cv2.VideoCapture(0)
cv2.namedWindow('frame', cv2.WINDOW_NORMAL)
cv2.resizeWindow('frame', 700, 700)
count = 0
while(cap.isOpened()):
ret, frame = cap.read()
cv2.imshow('frame',frame)
frame = cv2.resize(frame, (180,180))
frame = np.expand_dims(frame, axis=0)
frame = frame.astype('float32')
input_data = frame
interpreter.set_tensor(input_details[0]['index'], input_data)
interpreter.invoke()
output_data_tflite = interpreter.get_tensor(output_details[0]['index'])
label = class_labels[output_data_tflite.argmax()]
if label == "raccoon":
count += 1
else:
count = 0
if count > 5:
pixels.fill((255,255,255))
pixels.show()
if pygame.mixer.music.get_busy() != True:
pygame.mixer.music.play()
print("raccoon")
if label == "dog":
count += 1
else:
count = 0
if count > 5:
pixels.fill((255,255,255))
pixels.show()
if pygame.mixer.music.get_busy() != True:
pygame.mixer.music.play()
print("dog")
else:
pixels.fill((0,0,0))
pixels.show()
pygame.mixer.music.stop()
print("NOT")
if cv2.waitKey(1) & 0xFF == ord('q'):
break
cap.release()
cv2.destroyAllWindows() 
